Revision 9
An Alpha virtual machine has 32 32-bit registers
A word is 4 bytes
G0 always contains the value 0, any attempts to write to it will be ignored.
G31 is the program counter.

Arithmetic instructions needing 3 register arguments are in this format:
3-bit opcode
6-bit extended opcode
5-bit destination
5-bit operand 1
5-bit operand 2

Conditional jumps needing three register arguments are in this format:
3-bit opcode
5-bit condition
1-bit true/false bit
5-bit destination
5-bit left operand
5-bit right operand

Load/Store instructions are in this format:
3-bit opcode
3-bit extended opcode
5-bit destination register
5-bit source register

Instructions needing one register argument are in this format:
3-bit opcode
5-bit operand


=====Instruction Set=====
====Load/Store====
000 001 DDDDD SSSSS: RS->RD
000 010 DDDDD SSSSS: (RS)->RD
000 011 DDDDD SSSSS: RS->(RD)
001 DDDDD <WORD>: WORD->RD
====Flow Control====
010 00000 0 DDDDD LLLLL RRRRR: Jump if equal
010 00000 1 DDDDD LLLLL RRRRR: Jump if not equal
010 00001 0 DDDDD LLLLL RRRRR: Jump if less
010 00001 1 DDDDD LLLLL RRRRR: Jump if more
010 00010 0 DDDDD LLLLL RRRRR: Jump if less than or equal
010 00010 1 DDDDD LLLLL RRRRR: Jump if more than or equal
====Arithmetic and bitwise ops====
011 000000 DDDDD LLLLL RRRRR: RL+RR->RD
011 000001 DDDDD LLLLL RRRRR: RL-RR->RD
011 000010 DDDDD LLLLL RRRRR: RL*RR->RD
011 000011 DDDDD LLLLL RRRRR: RL/RR->RD
011 000100 DDDDD LLLLL RRRRR: RL%RR->RD
011 000101 DDDDD LLLLL RRRRR: RL AND RR->RD
011 000110 DDDDD LLLLL RRRRR: RL OR RR->RD
011 000111 DDDDD LLLLL RRRRR: RL XOR RR->RD
011 001000 DDDDD LLLLL RRRRR: RL LSH RR->RD
011 001001 DDDDD LLLLL RRRRR: RL RSH RR->RD
100 DDDDD: INC RD
101 DDDDD: DEC RD
110 000 DDDDD SSSSS: NOT RD -> RD
110 001 DDDDD SSSSS: RS LROT -> RD
110 010 DDDDD SSSSS: RS RROT -> RD
====I/O====
111 000 000 NN SSSSS: Print Nth byte of RS as ASCII
111 001 SSSSS: Print RS as an unsigned decimal number
111 010 SSSSS: Print RS as an uppercase hexadecimal number
111 011 SSSSS: Print RS as an lowercase hexadecimal number
111 100 DDDDD: Read a character from the keyboard into RD
111 101 DDDDD: Read an integer from the keyboard into RD
111 110 DDDDD: Print